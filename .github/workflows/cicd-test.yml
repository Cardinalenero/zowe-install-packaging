name: Zowe CICD Integration Tests
on:   
  workflow_dispatch:
    inputs:
      test-server:
        description: 'Choose Test Server'
        type: choice
        required: true
        default: 'Any zzow servers'
        options: 
          - Any zzow servers
          - zzow02
          - zzow03
          - zzow04
          - zzow02,zzow03,zzow04
      install-test:
        description: 'Choose Install Test'
        type: choice
        required: true
        default: Convenience Pax
        options:
          - Convenience Pax
          - SMPE FMID
          - SMPE PTF
          - Tech Preview Docker
          - Extensions
          - Keyring
          - z/OS node v12
          - z/OS node v14
          - z/OS node v16
          - Non-strict Verify External Certificate
          - Install PTF Twice
          - Generate API Documentation
          - Zowe Nightly Tests
          - Zowe Release Tests
      custom-zowe-artifactory-pattern-or-build-number:
        description: 'Custom Zowe Artifactory Pattern or Build Number:'
        required: false
      custom-zowe-cli-artifactory-pattern:
        description: 'Custom Zowe CLI Artifactory Pattern:'
        required: false
      custom-extension-list:
        description: 'Custom Extension List:'
        required: false
        default: 'sample-node-api;sample-trial-app'
      RANDOM_DISPATCH_EVENT_ID:
        description: 'random dispatch event id'
        required: false
        type: string

# create a new branch to overwrite following defaults if necessary
env:
  # constants
  INSTALL_TEST_PATH: tests/installation
  SANITY_TEST_PATH: tests/sanity
  DEFAULT_ZOWE_PAX_ARTIFACTORY_PATTERN: libs-snapshot-local/org/zowe/*zowe*{branch-name}*.pax
  DEFAULT_ZOWE_SMPE_ARTIFACTORY_PATTERN: libs-snapshot-local/org/zowe/*zowe-smpe*{branch-name}*.zip
  DEFAULT_ZOWE_TP_DOCKER_ARTIFACTORY_PATTERN: libs-snapshot-local/org/zowe/*server-bundle.amd64*{branch-name}*.tar
  DEFAULT_ZOWE_CLI_ARTIFACTORY_PATTERN: PLACE_HOLDER/org/zowe/cli/zowe-cli-package/*/zowe-cli-package-1*.zip
  DEFAULT_ZOWE_EXT_ARTIFACTORY_PATTERN: libs-snapshot-local/org/zowe/{ext-name}/*/{ext-name}-*.pax

  # can be overwritten, adjusted by DevOps only
  ZOS_NODE_VERSION: v12.18.4
  # ZOS_NODE_VERSION more to choose from: v14.15.1, v16.13.0
  CLIENT_NODE_VERSION: v12.18.3
  INSTALL_TEST_DEBUG_INFORMATION: zowe-install-test:*
  SANITY_TEST_DEBUG_INFORMATION: zowe-sanity-test:*

  # catalogue of files associated with install test configurations
  CONVENIENCE_PAX_TESTFILE: basic/install.ts
  SMPE_FMID_TESTFILE: basic/install-fmid.ts
  SMPE_PTF_TESTFILE: basic/install-ptf.ts
  TECH_PREVIEW_DOCKER_TESTFILE: basic/install-docker.ts
  EXTENSIONS_TESTFILE: basic/install-ext.ts
  KEYRING_TESTFILE: extended/keyring.ts
  ZOS_NODE_V12_TESTFILE: extended/node-versions/node-v12.ts
  ZOS_NODE_V14_TESTFILE: extended/node-versions/node-v14.ts
  ZOS_NODE_V16_TESTFILE: extended/node-versions/node-v16.ts
  NON_STRICT_VERIFY_EXTERNAL_CERTIFICATE_TESTFILE: extended/certificates/nonstrict-verify-external-certificate.ts
  INSTALL_PTF_TWICE_TESTFILE: extended/install-ptf-two-times.ts
  GENERAL_API_DOCUMENTATION_TESTFILE: basic/install-api-gen.ts
  ZOWE_RELEAE_TESTS_FULL: basic/install.ts(zzow02,zzow03,zzow04);basic/install-ptf.ts(zzow02,zzow03,zzow04);basic/install-docker.ts(zzow04);basic/install-ext.ts(zzow03);extended/keyring.ts(zzow02,zzow03,zzow04);extended/node-versions/node-v16.ts(zzow02,zzow03,zzow04);extended/node-versions/node-v12.ts(zzow02,zzow03,zzow04);extended/node-versions/node-v14.ts(zzow02,zzow03,zzow04);extended/certificates/nonstrict-verify-external-certificate.ts(zzow02)
  ZOWE_NIGHTLY_TESTS_FULL: basic/install.ts(zzow02,zzow03,zzow04);basic/install-ptf.ts(zzow02,zzow03,zzow04);basic/install-docker.ts(zzow04)

jobs:
  display-dispatch-event-id:
    if: github.event.inputs.RANDOM_DISPATCH_EVENT_ID != ''
    runs-on: ubuntu-latest
    steps:
      - name: RANDOM_DISPATCH_EVENT_ID is ${{ github.event.inputs.RANDOM_DISPATCH_EVENT_ID }}
        run: echo "prints random dispatch event id sent from workflow dispatch event"

  check-permission:
    runs-on: ubuntu-latest
    steps:
      # this action will fail the whole workflow if permission check fails
      - name: check permission
        uses: zowe-actions/shared-actions/permission-check@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  make-matrix:
    runs-on: ubuntu-latest
    needs: check-permission
    steps:
    - name: make test matrix
      id: set-matrix
      run: | 
        test_server="${{ github.event.inputs.test-server }}"
        install_test_choice="${{ github.event.inputs.install-test }}"
        case $install_test_choice in

          "Convenience Pax")
            test_file="${{ env.CONVENIENCE_PAX_TESTFILE }}"
            ;;

          "SMPE FMID")
            test_file="${{ env.SMPE_FMID_TESTFILE }}"
            ;;

          "SMPE PTF")
            test_file="${{ env.SMPE_PTF_TESTFILE }}"
            ;;

          "Tech Preview Docker")
            test_file="${{ env.TECH_PREVIEW_DOCKER_TESTFILE }}"
            ;;

          "Extensions")
            test_file="${{ env.EXTENSIONS_TESTFILE }}"
            ;;

          "Keyring")
            test_file="${{ env.KEYRING_TESTFILE }}"
            ;;
          
          "z/OS node v12")
            test_file="${{ env.ZOS_NODE_V12_TESTFILE }}"
            ;;

          "z/OS node v14")
            test_file="${{ env.ZOS_NODE_V14_TESTFILE }}"
            ;;

          "z/OS node v16")
            test_file="${{ env.ZOS_NODE_V16_TESTFILE }}"
            ;;

          "Non-strict Verify External Certificate")
            test_file="${{ env.NON_STRICT_VERIFY_EXTERNAL_CERTIFICATE_TESTFILE }}"
            ;;

          "Install PTF Twice")
            test_file="${{ env.INSTALL_PTF_TWICE_TESTFILE }}"
            ;;

          "Generate API Documentation")
            test_file="${{ env.GENERAL_API_DOCUMENTATION_TESTFILE }}"
            ;;
          
          "Zowe Nightly Tests")
            test_file="${{ env.ZOWE_NIGHTLY_TESTS_FULL }}"
            dont_parse_test_server=true
            ;;

          "Zowe Release Tests")
            test_file="${{ env.ZOWE_RELEAE_TESTS_FULL }}"
            dont_parse_test_server=true
            ;;
          
          *)
            echo "Something went wrong when parsing install test choice input"
            exit 1
            ;;
        esac

        if [[ -z "$dont_parse_test_server" ]]; then
          if [[ "$test_server" == "Any zzow servers" ]]; then
            test_server="zzow0"$(echo $(($RANDOM % 3 + 2)) )
          fi
          TEST_FILE_SERVER="$test_file($test_server)"
        else
          TEST_FILE_SERVER="$test_file"
        fi        

        # this is the final string that can be recognizable by the matrix processing script down below
        echo "TEST_FILE_SERVER is "$TEST_FILE_SERVER

        # sanitize all whitespaces just in case
        TEST_FILE_SERVER=$TEST_FILE_SERVER | tr -d "[:space:]"

        MATRIX_JSON_STRING="{\"include\":["
        for each_test_file_server in $(echo "$TEST_FILE_SERVER" | sed "s/;/ /g")
        do
          test_file=$(echo "$each_test_file_server" | cut -d "(" -f1)
          for test_server in $(echo "$each_test_file_server" | cut -d "(" -f2 | cut -d ")" -f1 | sed "s/,/ /g")
          do
            MATRIX_JSON_STRING="$MATRIX_JSON_STRING{\"test\":\"$test_file\",\"server\":\"marist-$test_server\"},"
          done
        done

        # remove trailing comma
        MATRIX_JSON_STRING=$(echo $MATRIX_JSON_STRING | sed 's/,$//g')

        MATRIX_JSON_STRING="$MATRIX_JSON_STRING]}"
        echo "::set-output name=matrix::$MATRIX_JSON_STRING"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  cicd-test:
    runs-on: ubuntu-latest
    needs: make-matrix
    strategy:
      matrix: ${{ fromJson(needs.make-matrix.outputs.matrix) }}
      fail-fast: false
    environment: ${{ matrix.server }}
    steps:
      - name: '[Prep 1] Checkout'
        uses: actions/checkout@v2

      - name: '[Prep 2] Setup Node'
        uses: actions/setup-node@v3
        with:
          node-version: '12'

      - name: '[Prep 3] Cache node modules'
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            ~/.nvm/.cache
            ~/.nvm/versions
          key: ${{ runner.os }}-build-cache-node-modules-${{ hashFiles('tests/installation/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-cache-node-modules-

      - name: '[Prep 4] Setup jFrog CLI'
        uses: jfrog/setup-jfrog-cli@v2
        env:
          JF_ENV_1: ${{ secrets.JF_ARTIFACTORY_TOKEN }}

      - name: '[Prep 5] Validate package.json'
        uses: zowe-actions/shared-actions/validate-package-json@main

      - name: '[Prep 6] Prepare workflow'
        uses: zowe-actions/shared-actions/prepare-workflow@main

      - name: '[Prep 7] Additional Prep work'
        id: more-test-prep
        run: |
          cd .github/scripts
          chmod +x *.sh
          source 00_init.sh
          source 01_helper_functions.sh
          source 02_process_zowe_art_pattern.sh
          source 03_process_test_server.sh
          source 04_process_cli_art_pattern.sh
          source 05_process_ext_list.sh
         

          ##################################################################################################
          ### 5. Process custom-zowe-tp-docker-artifactory-pattern (if test-docker is selected)
          ##################################################################################################
          if [[ "$MATRIX_TEST" == *"install-docker"* ]]; then
            if [[ -n "$ZOWE_ARTIFACTORY_FINAL" ]]; then
              # note that in here, $ZOWE_ARTIFACTORY_FINAL must be pax because smpe.zip should already be ruled out and fail before reaching here
              # get the build name and build number of the zowe pax we processed.
              json_output=$(jfrog rt search "$ZOWE_ARTIFACTORY_FINAL")
              processed_zowe_art_bldname=$(echo "$json_output" | jq -r '.[].props."build.name"[]')
              processed_zowe_art_bldnum=$(echo "$json_output" | jq -r '.[].props."build.number"[]')
              
              # then get branch name from the build name returned above
              # build name should be either 'zowe-install-packaging/branchname' (GHA) or 'zowe-install-packaging :: branchname' (Jenkins)
              processed_zowe_art_branchname=$(echo "$processed_zowe_art_bldname" | sed "s|zowe-install-packaging/||g")
              if [[ "$processed_zowe_art_branchname" == "$processed_zowe_art_bldname" ]]; then
                # means above sed replacement command didn't work, forward slash does not exists, highly likely this build is made from jenkins
                # try with colon colon as some builds are published from jenkins in the past and expecting to have colon colon in the build name
                processed_zowe_art_branchname=$(echo "$processed_zowe_art_bldname" | sed "s|zowe-install-packaging :: ||g")
                if [[ "$processed_zowe_art_branchname" == "$processed_zowe_art_bldname" ]]; then
                  printf "${RED}[Check ${TOTAL_CHECK} ERROR] Unable to parse branch name from $processed_zowe_art_bldname as it is not a valid build name.\n"
                  printf "${RED}[Check ${TOTAL_CHECK} ERROR] Just for the record, the zowe artifactory path is $ZOWE_ARTIFACTORY_FINAL\n"
                  exit 1
                fi
              fi

              echo "[Check ${TOTAL_CHECK} INFO] Zowe artifactory full path earlier is $ZOWE_ARTIFACTORY_FINAL"
              echo "[Check ${TOTAL_CHECK} INFO] The build name got from above is $processed_zowe_art_bldname"
              echo "[Check ${TOTAL_CHECK} INFO] The build number got from above is $processed_zowe_art_bldnum"
              echo "[Check ${TOTAL_CHECK} INFO] The branch name got from above is $processed_zowe_art_branchname"
              echo "[Check ${TOTAL_CHECK} INFO] We will use build number parsed $processed_zowe_art_bldnum to search if docker build exists in the same build."

              # now use processed build name and build number to search the docker artifact associated with it
              if [[ -n "$processed_zowe_art_bldname" ]] && [[ -n "$processed_zowe_art_bldnum" ]] && [[ -n "$processed_zowe_art_branchname" ]]; then
                if [[ "$processed_zowe_art_branchname" =~ ^v([0-9])\.x\/master$ ]] ; then
                  zowe_tp_docker_artifactory_pattern=$(echo "${{ env.DEFAULT_ZOWE_TP_DOCKER_ARTIFACTORY_PATTERN }}" | sed "s#{branch-name}#${BASH_REMATCH[1]}.*snapshot#g")
                elif [[ "$processed_zowe_art_branchname" =~ ^v([0-9])\.x\/rc$ ]] ; then
                  zowe_tp_docker_artifactory_pattern=$(echo "${{ env.DEFAULT_ZOWE_TP_DOCKER_ARTIFACTORY_PATTERN }}" | sed "s#{branch-name}#${BASH_REMATCH[1]}.*rc#g")
                elif [[ "$processed_zowe_art_branchname" =~ ^v([0-9])\.x\/staging$ ]] ; then
                  zowe_tp_docker_artifactory_pattern=$(echo "${{ env.DEFAULT_ZOWE_TP_DOCKER_ARTIFACTORY_PATTERN }}" | sed "s#{branch-name}#${BASH_REMATCH[1]}.*staging#g")
                else
                  processed_zowe_art_branchname=$(echo "$processed_zowe_art_branchname" | sed "s#\/#-#g")
                  zowe_tp_docker_artifactory_pattern=$(echo "${{ env.DEFAULT_ZOWE_TP_DOCKER_ARTIFACTORY_PATTERN }}" | sed "s#{branch-name}#$processed_zowe_art_branchname#g")
                fi

                echo "[Check ${TOTAL_CHECK} INFO] TP docker artifactory pattern is $zowe_tp_docker_artifactory_pattern"
                ZOWE_TP_DOCKER_ARTIFACTORY=$(jfrog_search_build "$zowe_tp_docker_artifactory_pattern" "$processed_zowe_art_bldname" "$processed_zowe_art_bldnum")
                ZOWE_TP_DOCKER_ARTIFACTORY_URL="https://zowe.jfrog.io/zowe/$ZOWE_TP_DOCKER_ARTIFACTORY"
              else
                printf "${RED}[Check ${TOTAL_CHECK} ERROR] Either the parsing of build name, build number or branch name of $ZOWE_ARTIFACTORY_FINAL failed.\n"
                exit 1
              fi
            else
              printf "${RED}[Check ${TOTAL_CHECK} ERROR] Zowe artifactory full path is not processed properly. This is extremely rare.\n"
              exit 1
            fi

            # try to know if this docker artifact searched comes from an older build and gives warning
            if [[ "$ZOWE_TP_DOCKER_ARTIFACTORY" == *"server-bundle.amd64"*tar ]]; then
              tpdocker_out=$(jfrog rt search "$ZOWE_TP_DOCKER_ARTIFACTORY")
              tpdocker_bld_name=$(echo "$tpdocker_out" | jq -r '.[].props."build.name"[]')
              tpdocker_bld_num=$(echo "$tpdocker_out" | jq -r '.[].props."build.number"[]')

              # encode '/' or ' ' in tpdocker build name to avoid confusion for jfrog REST API
              if [[ "$tpdocker_bld_name" == *"/"* ]]; then
                tpdocker_bld_name_encoded=$(echo "$tpdocker_bld_name" | sed "s|/|\%2F|g")
              elif [[ "$tpdocker_bld_name" == *"::"* ]]; then
                tpdocker_bld_name_encoded=$(echo "$tpdocker_bld_name" | sed "s| |\%20|g")
              fi

              latest_pax_bld_num=$(jfrog rt curl -s -XGET "/api/build/$tpdocker_bld_name_encoded" | jq '.buildsNumbers[0].uri' | sed "s|/||g" | sed "s|\"||g" )
        
              if [[ "$latest_pax_bld_num" != "$tpdocker_bld_num" ]]; then            
                printf "${YELLOW}[Check $TOTAL_CHECK WARNING] I see that you are trying to grab an older docker build $tpdocker_bld_num on $tpdocker_bld_name.\n"
                printf "${YELLOW}[Check $TOTAL_CHECK WARNING] However just be aware that there are more code changes (newer builds) after $tpdocker_bld_num, which is $latest_pax_bld_num.\n"
                printf "${YELLOW}[Check $TOTAL_CHECK WARNING] You should always test latest code on your branch unless you want to compare with older builds for regression.\n"            
              fi
            fi

            assert_env_var ZOWE_TP_DOCKER_ARTIFACTORY_URL
            printf "${GREEN}[Check $TOTAL_CHECK/$TOTAL_CHECK] Zowe tech preview docker artifactory full path processing complete!${NC}\n"
          fi

          ##################################################################################################
          ### Set outputs
          ##################################################################################################
          echo ::set-output name=ZOWE_ARTIFACTORY_FINAL::$ZOWE_ARTIFACTORY_FINAL
          echo ::set-output name=ZOWE_ARTIFACTORY_FINAL_FILENAME::$ZOWE_ARTIFACTORY_FINAL_FILENAME
          echo ::set-output name=NODE_HOME_PATTERN::/ZOWE/node/node-${{ env.ZOS_NODE_VERSION }}-os390-s390x
          echo ::set-output name=TEST_SERVER::$TEST_SERVER
          echo ::set-output name=TEST_SERVER_NICKNAME::$TEST_SERVER_NICKNAME
          echo ::set-output name=EXTENSION_LIST::$EXTENSION_LIST
          echo ::set-output name=ZOWE_CLI_ARTIFACTORY_FINAL::$ZOWE_CLI_ARTIFACTORY_FINAL
          echo ::set-output name=ZOWE_TP_DOCKER_ARTIFACTORY_URL::$ZOWE_TP_DOCKER_ARTIFACTORY_URL

          ##################################################################################################
          ### Echo all processed outputs
          ##################################################################################################
          echo
          echo "#######################Summary of outputs:#######################"
          printf "Zowe artifactory path: ${CYAN}$ZOWE_ARTIFACTORY_FINAL${NC}\n"
          printf "Zowe artifactory file name: ${CYAN}$ZOWE_ARTIFACTORY_FINAL_FILENAME${NC}\n"
          printf "Zowe CLI artifactory path: ${CYAN}$ZOWE_CLI_ARTIFACTORY_FINAL${NC}\n"
          printf "Zowe TP Docker artifactory path: ${CYAN}$ZOWE_TP_DOCKER_ARTIFACTORY_URL${NC}\n"
          printf "Zowe extension list: ${CYAN}$EXTENSION_LIST${NC}\n"
          printf "Test server: ${CYAN}$TEST_SERVER${NC}\n"
          printf "Test server nickname: ${CYAN}$TEST_SERVER_NICKNAME${NC}\n"
          printf "Node home pattern on z/OS: ${CYAN}/ZOWE/node/node-${{ env.ZOS_NODE_VERSION }}-os390-s390x${NC}\n"
        env:
          CURRENT_BRANCH: ${{ env.CURRENT_BRANCH }}
          MATRIX_TEST: ${{ matrix.test }}
          MATRIX_SERVER: ${{ matrix.server }}
          INPUT_CUSTOM_ZOWE_ART_PAT_OR_BLDNUM: ${{ github.event.inputs.custom-zowe-artifactory-pattern-or-build-number }}
          CUSTOM_ZOWE_CLI_ARTIFACTORY_PATTERN: ${{ github.event.inputs.custom-zowe-cli-artifactory-pattern }}
          CUSTOM_EXTENSION_LIST: ${{ github.event.inputs.custom-extension-list }}

      - name: '[Setup 1] Project Setup 1'
        working-directory: ${{ env.INSTALL_TEST_PATH }}
        run: |
          npm ci
          npm run build

      - name: '[Setup 2] Project Setup 2'
        working-directory: ${{ env.SANITY_TEST_PATH }}
        run: |
          npm ci

      - name: '[Lint 1] Lint 1'
        timeout-minutes: 2
        working-directory: ${{ env.INSTALL_TEST_PATH }}
        run: |
          npm run lint

      - name: '[Lint 2] Lint 2'
        timeout-minutes: 2
        working-directory: ${{ env.SANITY_TEST_PATH }}
        run: |
          npm run lint

      - name: '[Download 1] Download zowe.pax or smpe-zowe.zip'
        uses: zowe-actions/shared-actions/jfrog-download@main
        with:
          source-path-or-pattern: ${{ steps.more-test-prep.outputs.ZOWE_ARTIFACTORY_FINAL }}
          default-target-path: ${{ runner.temp }}/zowe/
          extra-options: --flat=true
          expected-count: 1

      - name: '[Download 2] Download cli package'
        uses: zowe-actions/shared-actions/jfrog-download@main
        with:
          source-path-or-pattern: ${{ steps.more-test-prep.outputs.ZOWE_CLI_ARTIFACTORY_FINAL }}
          default-target-path: ${{ runner.temp }}/cli/
          extra-options: --flat=true --explode=true
          expected-count: 1

      - name: '[Install] Install CLI'
        timeout-minutes: 10
        working-directory: ${{ runner.temp }}/cli
        run: npm install -g zowe-cli*.tgz
      
      - name: '[Comment] Post comments on PR about what tests are gonna be run'
        uses: actions/github-script@v5
        id: create-comment
        if: startsWith(env.CURRENT_BRANCH, 'PR-')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var installTest = "${{ github.event.inputs.install-test }}"
            if (installTest == '') {  
              // if null, this is very likely to be triggered by pr auto test
              installTest = 'Convenience Pax'
            }

            var prNum='${{ env.CURRENT_BRANCH }}'.split('-')[1]

            var body=`Test workflow ${context.runNumber} is started.\n`
            body += `Running install test: ${installTest} \n`
            body += `The zowe artifact being used by this test workflow: ${{ steps.more-test-prep.outputs.ZOWE_ARTIFACTORY_FINAL }} \n`
            body += `Running on machine: ${{ steps.more-test-prep.outputs.TEST_SERVER }} \n`
            body += `Acquiring the test server lock first, please wait... \n `
            body += `ETA: unknown (This ETA will get updated once the machine lock is acquired) \n`
            body += `Link to workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            
            const { data: comment } = await github.rest.issues.createComment({ 
              issue_number: prNum,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

            return comment.id;

      - name: '[LOCK] Lock marist servers'
        uses: zowe-actions/shared-actions/lock-resource@main
        with:
          lock-repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lock-resource-name: zowe-install-test-${{ steps.more-test-prep.outputs.TEST_SERVER }}-lock
          lock-avg-retry-interval: 60
      
      - name: '[Comment] Update comment after lock is acquired'
        uses: actions/github-script@v5
        if: steps.create-comment.outputs.result != ''
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var installTest = "${{ github.event.inputs.install-test }}"
            var eta
            if (installTest == '') {  
              // if null, this is very likely to be triggered by pr auto test
              installTest = 'Convenience Pax'
            }

            // get ETA for each test run
            switch(installTest) {
              case 'Convenience Pax':
                eta = 27
                break;
              case 'SMPE PTF':
                eta = 47
                break;
              case 'Tech Preview docker':
                eta = 22
                break;
              case 'Extensions':
                eta = 35
                break;
              case 'Keyring':
                eta = 27
                break;
              case 'z/OS node v12':
                eta = 25
                break;
              case 'z/OS node v14':
                eta = 25
                break;
              case 'z/OS node v16':
                eta = 25
                break;
              case 'Non-strict Verify External Certificate':
                eta = 25
                break;
              case 'Zowe Release Tests':
                eta = 240
                break;
              default:
            }

            var expectedTimeString
            if (eta != '') {
              const finish_time = new Date(new Date().getTime() + eta*60*1000);
              const finish_time_EST = finish_time.toLocaleString('en-CA', { timeZone: 'Canada/Eastern' }).split(', ')[1] + " EST"
              const finish_time_CET = finish_time.toLocaleString('en-EU', { timeZone: 'Europe/Prague' }).split(', ')[1] + " CET"
              const finish_time_UTC = finish_time.toLocaleString('en-GB', { timeZone: 'Europe/London' }).split(', ')[1] + " GMT"
              const finish_time_PST = finish_time.toLocaleString('en-US', { timeZone: 'America/Los_Angeles' }).split(', ')[1] + " PST"
              expectedTimeString = `Check back around: \n ${finish_time_EST}  |  ${finish_time_CET}  |  ${finish_time_UTC}  |  ${finish_time_PST} \n`
            }
            else {
              eta = 'unknown'
            }

            var body=`Test workflow ${context.runNumber} is started.\n`
            body += `Running install test: ${installTest} \n`
            body += `The zowe artifact being used by this test workflow: ${{ steps.more-test-prep.outputs.ZOWE_ARTIFACTORY_FINAL }} \n`
            body += `Running on machine: ${{ steps.more-test-prep.outputs.TEST_SERVER }} \n`
            body += `Lock acquired, start the test now, please wait... \n `
            body += `ETA: ${eta} mins \n`
            if (expectedTimeString != '') {
              body += `${expectedTimeString} \n`
            }
            body += `Result: <PENDING> (will get updated once test is finished) \n`
            body += `Link to workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.create-comment.outputs.result }},
              body: body
            });

      - name: '[Test] Test starts from here'
        timeout-minutes: 90
        working-directory: ${{ env.INSTALL_TEST_PATH }}
        run: npm test -- --testPathPattern --detectOpenHandles dist/__tests__/$(echo "${{ matrix.test }}" | sed "s/.ts/.js/g")
        env:
          ANSIBLE_FORCE_COLOR: true
          TEST_SERVER: ${{ steps.more-test-prep.outputs.TEST_SERVER_NICKNAME }}
          ZOWE_BUILD_LOCAL: "${{ runner.temp }}/zowe/${{ steps.more-test-prep.outputs.ZOWE_ARTIFACTORY_FINAL_FILENAME }}"
          ZOWE_DOCKER_URL: ${{ steps.more-test-prep.outputs.ZOWE_TP_DOCKER_ARTIFACTORY_URL }}
          EXTENSIONS_LIST: ${{ steps.more-test-prep.outputs.EXTENSION_LIST }}
          SANITY_TEST_DEBUG: ${{ env.SANITY_TEST_DEBUG_INFORMATION }}
          DEBUG: ${{ env.INSTALL_TEST_DEBUG_INFORMATION }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          ZOS_NODE_HOME: ${{ steps.more-test-prep.outputs.NODE_HOME_PATTERN }}
      #     # ANSIBLE_VERBOSE: -vvv

      - name: '[After Test 1] Prepare to upload test report'
        if: always()
        working-directory: ${{ env.INSTALL_TEST_PATH }}
        run: | 
          echo CURRENT_TIME=$(date +%s) >> $GITHUB_ENV
          echo TEST_NAME=$(echo "${{ matrix.test }}" | sed 's#.*\/##g') >> $GITHUB_ENV

      - name: '[After Test 2] Upload test report'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: InstallTestReports-${{ env.TEST_NAME }}-${{ steps.more-test-prep.outputs.TEST_SERVER_NICKNAME }}-${{ github.run_id }}-${{ env.CURRENT_TIME }}
          path: ${{ env.INSTALL_TEST_PATH }}/reports/

      - name: '[Comment] Update PR comment to indicate test succeeded'
        uses: actions/github-script@v5
        if: steps.create-comment.outputs.result != '' && success()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var installTest = "${{ github.event.inputs.install-test }}"
            var eta
            if (installTest == '') {  
              // if null, this is very likely to be triggered by pr auto test
              installTest = 'Convenience Pax'
            }

            var body=`Test workflow ${context.runNumber} is started.\n`
            body += `Running install test: ${installTest} \n`
            body += `The zowe artifact being used by this test workflow: ${{ steps.more-test-prep.outputs.ZOWE_ARTIFACTORY_FINAL }} \n`
            body += `Running on machine: ${{ steps.more-test-prep.outputs.TEST_SERVER }} \n`
            body += `Result: SUCCESS \n`
            body += `Link to workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.create-comment.outputs.result }},
              body: body
            });

      - name: '[Comment] Update PR comment to indicate test failed'
        uses: actions/github-script@v5
        if: steps.create-comment.outputs.result != '' && failure()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var installTest = "${{ github.event.inputs.install-test }}"
            var eta
            if (installTest == '') {  
              // if null, this is very likely to be triggered by pr auto test
              installTest = 'Convenience Pax'
            }

            var body=`Test workflow ${context.runNumber} is started.\n`
            body += `Running install test: ${installTest} \n`
            body += `The zowe artifact being used by this test workflow: ${{ steps.more-test-prep.outputs.ZOWE_ARTIFACTORY_FINAL }} \n`
            body += `Running on machine: ${{ steps.more-test-prep.outputs.TEST_SERVER }} \n`
            body += `Result: FAILURE \n`
            body += `Link to workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`

            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.create-comment.outputs.result }},
              body: body
            });

      - name: '[Comment] Update PR comment to indicate test cancelled'
        uses: actions/github-script@v5
        if: steps.create-comment.outputs.result != '' && cancelled()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var installTest = "${{ github.event.inputs.install-test }}"
            var eta
            if (installTest == '') {  
              // if null, this is very likely to be triggered by pr auto test
              installTest = 'Convenience Pax'
            }

            var body=`Test workflow ${context.runNumber} is started.\n`
            body += `Running install test: ${installTest} \n`
            body += `The zowe artifact being used by this test workflow: ${{ steps.more-test-prep.outputs.ZOWE_ARTIFACTORY_FINAL }} \n`
            body += `Running on machine: ${{ steps.more-test-prep.outputs.TEST_SERVER }} \n`
            body += `Result: CANCELLED \n`
            body += `Link to workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.create-comment.outputs.result }},
              body: body
            });

