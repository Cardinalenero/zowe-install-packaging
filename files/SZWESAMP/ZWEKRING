//ZWEKRING JOB
//*
//* This program and the accompanying materials are made available
//* under the terms of the Eclipse Public License v2.0 which
//* accompanies this distribution, and is available at
//* https://www.eclipse.org/legal/epl-v20.html
//*
//* SPDX-License-Identifier: EPL-2.0
//*
//* Copyright Contributors to the Zowe Project. 2020, 2020
//*
//*********************************************************************
//*
//* Zowe Open Source Project
//* This JCL can be used to define key ring and certificates for Zowe
//*
//*********************************************************************
//* ATTENTION!
//* Configure certificate for Zowe
//* Select one of three options which is the most suitable for your
//* environment and follow the appropriate action
//*
//* Options:
//*  1. (default option) Generate Zowe's certificate that will be
//*     signed by the Zowe's local CA
//*
//*  2. Zowe's certificate is already loaded in RACF database
//*     ACTION:
//*     a. modify the following snippet
//*        CONNECT(SITE | ID(userid) +
//*        LABEL('certlabel') +
//*        to match the owner of the desired certificate
//*
//*  3. Import external Zowe's certificate from a data set in PKCS12
//*     format
//*
//*********************************************************************
//*
//* CAUTION: This is neither a JCL procedure nor a complete job.
//* Before using this JCL, you will have to make the following
//* modifications:
//*
//* 1) Add job name and job parameters to the JOB statement, to
//*    meet your system requirements.
//*
//* 2) Specify the option number which is suitable for your
//*    environment by the SET OPTION statement.
//*    Option 1 considers as default option.
//* 3) Update the SET IPADDRES= variable to match the IP address
//*    where Zowe is to run.
//*
//* 4) If you have external certificate authorities for ITRMZWCA
//*     and/or ROOTZWCA, set IFZOWECA to 1 to connect to Zowe keyring.
//*
//* 5) Update the SET ITRMZWCA= variable to match the intermediate
//*     CA of the Zowe certificate. It is only applicable if Zowe
//*     certificate signed by a recognized certificate authority (CA).
//*
//* 6) Update the SET ROOTZWCA= variable to match the root CA of the
//*     Zowe certificate. It is only applicable if Zowe certificate
//*     signed by a recognized certificate authority (CA).
//*
//* 7) If you enable VERIFY_CERTIFICATES or
//*     NONSTRICT_VERIFY_CERTIFICATES and define ROOTZFCA, set
//*     IFROZFCA to 1 to connect z/OSMF certificate authority to
//*     Zowe keyring. Otherwise set to 0.
//*
//* 8) Update the SET ROOTZFCA= variable to match the root CA of the
//*     z/OSMF certificate. It is only applicable if z/OSMF
//*     certificate signed by a recognized certificate authority (CA).
//*
//* 9) Customize the commands in the DD statement that matches your
//*     security product so that they meet your system requirements.
//*
//* Note(s):
//*
//* 1. The userid that runs this job must have sufficient authority
//*    to alter security definitions
//*
//* 2. Assumption: signing CA chain of the Zowe external certificate is
//*    added to the security database under the CERTAUTH userid.
//*
//* 3. If the Zowe certificate is imported from a data set then
//*    the certificate has to be in PKCS12 format and has to
//*    contain Zowe certificate's signing CA chain and private key.
//*
//* 4. This job WILL complete with return code 0.
//*    The results of each command must be verified after completion.
//*
//*********************************************************************
//         EXPORT SYMLIST=*
//*
//*      * Option number to configure Zowe certificate
//*      * Valid options: 1,2,3
//*      * Default option is 1
//         SET OPTION=1
//*      * IP address of the system where Zowe is to run
//         SET IPADDRES=''
//*      * If you have external certificate authorities for ITRMZWCA
//*      * and/or ROOTZWCA, set IFZOWECA to 1 to connect to Zowe keyring.
//         SET IFZOWECA=0
//*      * Label of the intermediate CA of the Zowe certificate
//*        if applicable
//         SET ITRMZWCA=''
//*      * Label of the root CA of the Zowe certificate if applicable
//         SET ROOTZWCA=''
//*      * If you enable VERIFY_CERTIFICATES or
//*      * NONSTRICT_VERIFY_CERTIFICATES and define ROOTZFCA, set
//*      * IFROZFCA to 1 to connect z/OSMF certificate authority to
//*      * Zowe keyring. Otherwise set to 0.
//         SET IFROZFCA=0
//*      * Label of the root CA of the z/OSMF certificate if
//*        applicable
//         SET ROOTZFCA=''
//*
//*********************************************************************
//*
//* EXECUTE COMMANDS FOR SELECTED SECURITY PRODUCT
//*
//RUNRACF  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME={zowe.setup.security.product}
//*
//*********************************************************************
//*
//* RACF ONLY, customize to meet your system requirements
//*
//RACF     DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* Create the keyring .............................................. */
   RACDCERT ADDRING({zowe.setup.certificate.keyring.name}.) ID({zowe.setup.security.users.zowe}.)
   SETROPTS RACLIST(DIGTRING) REFRESH
$$
//IFOPT1   IF (&OPTION EQ 1) THEN
//RUNOPT1  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//RACF     DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* Option 1 - Default Option - BEGINNING ........................... */
/* Create Zowe's local CA authority .................................*/
   RACDCERT GENCERT CERTAUTH +
            SUBJECTSDN( +
              CN('{zowe.setup.certificate.dname}. CA') +
              OU('{zowe.setup.certificate.dname.orgUnit}.') +
              O('{zowe.setup.certificate.dname.org}.') +
              L('{zowe.setup.certificate.dname.locality}.') +
              SP('{zowe.setup.certificate.dname.state}.') +
              C('{zowe.setup.certificate.dname.country}.')) +
            SIZE(2048) +
            NOTAFTER(DATE(2030-05-01)) +
            WITHLABEL('{zowe.setup.certificate.keyring.caLabel}') +
            KEYUSAGE(CERTSIGN)

/* Connect Zowe's local CA authority to the keyring ................ */
   RACDCERT CONNECT(CERTAUTH LABEL('{zowe.setup.certificate.keyring.caLabel}') +
            RING({zowe.setup.certificate.keyring.name}.)) +
            ID({zowe.setup.security.users.zowe}.)

/* Create a certificate signed by local zowe's CA .................. */
   RACDCERT GENCERT ID({zowe.setup.security.users.zowe}.) +
            SUBJECTSDN( +
              CN('{zowe.setup.certificate.dname}. certificate') +
              OU('{zowe.setup.certificate.dname.orgUnit}.') +
              O('{zowe.setup.certificate.dname.org}.') +
              L('{zowe.setup.certificate.dname.locality}.') +
              SP('{zowe.setup.certificate.dname.state}.') +
              C('{zowe.setup.certificate.dname.country}.')) +
            SIZE(2048) +
            NOTAFTER(DATE(2030-05-01)) +
            WITHLABEL('{zowe.setup.certificate.keyring.label}.') +
            KEYUSAGE(HANDSHAKE) +
            ALTNAME(IP(&IPADDRES) +
                DOMAIN('{zowe.externalDomains[0]}')) +
            SIGNWITH(CERTAUTH LABEL('{zowe.setup.certificate.keyring.caLabel}'))

/* Connect a Zowe's certificate with the keyring ................... */
   RACDCERT CONNECT(ID({zowe.setup.security.users.zowe}.) +
            LABEL('{zowe.setup.certificate.keyring.label}.') +
            RING({zowe.setup.certificate.keyring.name}.) +
            USAGE(PERSONAL) DEFAULT) +
            ID({zowe.setup.security.users.zowe}.)

   SETROPTS RACLIST(DIGTCERT,DIGTRING) REFRESH

/* Option 1 - Default Option - END ................................. */
$$
//IFOPT1ED ENDIF
//*
//IFOPT2   IF (&OPTION EQ 2) THEN
//RUNOPT2  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//RACF     DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* Option 2 - BEGINNING ............................................ */
/* Connect a Zowe's certificate with the keyring ................... */
   RACDCERT CONNECT(SITE | ID({zowe.setup.certificate.keyring.connect.user}) +
            LABEL({zowe.setup.certificate.keyring.connect.label}) +
            RING({zowe.setup.certificate.keyring.name}.) +
            USAGE(PERSONAL) DEFAULT) +
            ID({zowe.setup.security.users.zowe}.)

   SETROPTS RACLIST(DIGTCERT,DIGTRING) REFRESH

/* Option 2 - END .................................................. */
$$
//IFOPT2ED ENDIF
//*
//IFOPT3   IF (&OPTION EQ 3) THEN
//RUNOPT3  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//RACF     DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* Option 3 - BEGINNING ............................................ */
/* Import external certificate from data set ....................... */
   RACDCERT ADD('{zowe.setup.certificate.keyring.import.dsName}.') +
            ID({zowe.setup.security.users.zowe}.) +
            WITHLABEL('{zowe.setup.certificate.keyring.label}') +
            PASSWORD('{zowe.setup.certificate.keyring.import.password}.') +
            TRUST

/* Connect a Zowe's certificate with the keyring ................... */
   RACDCERT CONNECT(ID({zowe.setup.security.users.zowe}.) +
            LABEL('{zowe.setup.certificate.keyring.label}') +
            RING({zowe.setup.certificate.keyring.name}.) +
            USAGE(PERSONAL) DEFAULT) +
            ID({zowe.setup.security.users.zowe}.)

   SETROPTS RACLIST(DIGTCERT,DIGTRING) REFRESH

/* Option 3 - END .................................................. */
$$
//IFOPT3ED ENDIF
//*
//IFZWCA   IF (&IFZOWECA EQ 1) THEN
//RUNZWCA  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//RACF     DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* Connect all CAs of the Zowe certificate's signing chain with the  */
/* keyring ......................................................... */
   RACDCERT CONNECT(CERTAUTH +
            LABEL('&ITRMZWCA.') +
            RING({zowe.setup.certificate.keyring.name}.) USAGE(CERTAUTH)) +
            ID({zowe.setup.security.users.zowe}.)

   RACDCERT CONNECT(CERTAUTH +
            LABEL('&ROOTZWCA.') +
            RING({zowe.setup.certificate.keyring.name}.) USAGE(CERTAUTH)) +
            ID({zowe.setup.security.users.zowe}.)

   SETROPTS RACLIST(DIGTCERT,DIGTRING) REFRESH
$$
//IFZWCAED ENDIF
//*
//IFZFCA   IF (&IFROZFCA EQ 1) THEN
//RUNZFCA  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//RACF     DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* Connect the z/OSMF root CA signed by a recognized certificate ... */
/* authority (CA) with the keyring ................................. */
   RACDCERT CONNECT(CERTAUTH +
            LABEL('&ROOTZFCA.') +
            RING({zowe.setup.certificate.keyring.name}.) USAGE(CERTAUTH)) +
            ID({zowe.setup.security.users.zowe}.)

   SETROPTS RACLIST(DIGTCERT,DIGTRING) REFRESH
$$
//IFZFCAED ENDIF
//*
//COMRACF  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//RACF     DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* A common part for all options - BEGINNING ....................... */

/* Allow ZOWEUSER to access keyring ................................ */

/* Activate RDATALIB class holding profiles that control ........... */
/* certificate access  ............................................. */
   SETROPTS CLASSACT(RDATALIB) RACLIST(RDATALIB)

/* Define profiles that control certificate access ................. */
   RDEFINE RDATALIB {zowe.setup.security.users.zowe}..{zowe.setup.certificate.keyring.name}..LST UACC(NONE)

/* Permit server user ID to access key ring and related ............ */
/* private keys. ................................................... */
   PERMIT {zowe.setup.security.users.zowe}..{zowe.setup.certificate.keyring.name}..LST CLASS(RDATALIB) ID({zowe.setup.security.users.zowe}.) +
          ACCESS(CONTROL) 

/* Uncomment this command to allow other user to access key ring ... */
/* PERMIT {zowe.setup.security.users.zowe}..{zowe.setup.certificate.keyring.name}..LST CLASS(RDATALIB) ID(<user>) +     */
/*        ACCESS(READ)                                               */

/* Refresh to dynamically activate the changes. .................... */
   SETROPTS RACLIST(RDATALIB) REFRESH

/* IRR.DIGTCERT logic pre-dates RDATALIB logic, and is not used when */
/* the RDATALIB profile is used. The following PERMIT commands are . */
/* present for customers who do not wish to use RDATALIB and want to */
/* continue using their existing IRR.DIGTCERT setup. Note that the . */
/* PERMIT commands will fail if the IRR.DIGTCERT profiles do not ... */
/* already exist. .................................................. */
   PERMIT IRR.DIGTCERT.LISTRING CLASS(FACILITY) ID({zowe.setup.security.users.zowe}.) +
          ACCESS(READ)
   PERMIT IRR.DIGTCERT.LIST CLASS(FACILITY) ID({zowe.setup.security.users.zowe}.) +
          ACCESS(READ)

/* Uncomment this command if SITE user owns the Zowe certificate ... */
/*  PERMIT IRR.DIGTCERT.GENCERT CLASS(FACILITY) ID({zowe.setup.security.users.zowe}.) +     */
/*         ACCESS(CONTROL)                                           */

   SETROPTS RACLIST(FACILITY) REFRESH

/* show results .................................................... */
   RLIST  RDATALIB {zowe.setup.security.users.zowe}..{zowe.setup.certificate.keyring.name}..LST ALL
   RLIST  FACILITY IRR.DIGTCERT.LISTRING ALL
   RLIST  FACILITY IRR.DIGTCERT.LIST ALL
   RLIST  FACILITY IRR.DIGTCERT.GENCERT ALL

/* List the keyring ................................................ */
   RACDCERT LISTRING({zowe.setup.certificate.keyring.name}.) ID({zowe.setup.security.users.zowe}.)

/* Common part - END ............................................... */
/* only the last RC is returned, this command ensures it is a 0 .... */
PROFILE
$$
//*******************************************************************
//*
//* ACF2 ONLY, customize to meet your system requirements
//*
//*******************************************************************
//RUNACF2  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//*
//ACF2     DD DATA,DLM=$$,SYMBOLS=JCLONLY
ACF
//
* Create the keyring .............................................. */
  SET PROFILE(USER) DIVISION(KEYRING)
  INSERT {zowe.setup.security.users.zowe}..ZOWERING RINGNAME({zowe.setup.certificate.keyring.name}.)
  F ACF2,REBUILD(USR),CLASS(P),DIVISION(KEYRING)
$$
//IFOPT1   IF (&OPTION EQ 1) THEN
//RUNOPT1  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//ACF2     DD DATA,DLM=$$,SYMBOLS=JCLONLY
ACF
//
* Option 1 - Default Option - BEGINNING ........................... */
* Create Zowe's local CA authority ................................ */
  SET PROFILE(USER) DIVISION(CERTDATA)
  GENCERT CERTAUTH.ZOWECA LABEL({zowe.setup.certificate.keyring.caLabel}) SIZE(2048) -
          SUBJSDN(CN='{zowe.setup.certificate.dname}. CA' -
                  OU='{zowe.setup.certificate.dname.orgUnit}.' -
                  O='{zowe.setup.certificate.dname.org}.' -
                  L='{zowe.setup.certificate.dname.locality}.' -
                  SP='{zowe.setup.certificate.dname.state}.' -
                  C='{zowe.setup.certificate.dname.country}.') -
  EXPIRE(05/01/30) -
  KEYUSAGE(CERTSIGN)
*
* Connect Zowe's local CA authority to the keyring ................ */
  SET PROFILE(USER) DIVISION(CERTDATA)
  CONNECT CERTDATA(CERTAUTH.ZOWECA) RINGNAME({zowe.setup.certificate.keyring.name}.) -
  KEYRING({zowe.setup.security.users.zowe}..ZOWERING) USAGE(CERTAUTH)
  CHKCERT CERTAUTH.ZOWECA
*
* Create a certificate signed by local zowe's CA .................. */
   SET PROFILE(USER) DIV(CERTDATA)
   GENCERT {zowe.setup.security.users.zowe}..ZOWECERT -
            SUBJSDN(CN='{zowe.setup.certificate.dname}. certificate' -
                    OU='{zowe.setup.certificate.dname.orgUnit}.' -
                    O='{zowe.setup.certificate.dname.org}.' -
                    L='{zowe.setup.certificate.dname.locality}.' -
                    SP='{zowe.setup.certificate.dname.state}.' -
                    C='{zowe.setup.certificate.dname.country}.') -
           SIZE(2048) -
           EXPIRE(05/01/30) -
           LABEL({zowe.setup.certificate.keyring.label}.) -
           KEYUSAGE(HANDSHAKE) -
           ALTNAME(IP=&IPADDRES DOMAIN={zowe.externalDomains[0]}) -
           SIGNWITH(CERTAUTH.ZOWECA)
*
* Connect a Zowe's certificate with the keyring ................... */
   SET PROFILE(USER) DIVISION(CERTDATA)
   CONNECT CERTDATA({zowe.setup.security.users.zowe}..ZOWECERT) -
   KEYRING({zowe.setup.security.users.zowe}..ZOWERING) USAGE(PERSONAL) DEFAULT
   CHKCERT {zowe.setup.security.users.zowe}..ZOWECERT
*
* Option 1 - Default Option - END ................................. */
$$
//IFOPT1ED ENDIF
//*
//IFOPT2   IF (&OPTION EQ 2) THEN
//RUNOPT2  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//ACF2     DD DATA,DLM=$$,SYMBOLS=JCLONLY
ACF
//
* Option 2 - BEGINNING ............................................ */
* Connect a Zowe's certificate with the keyring ................... */
   SET PROFILE(USER) DIVISION(CERTDATA)
   CONNECT CERTDATA(SITECERT.digicert | userid.digicert) -
   KEYRING({zowe.setup.security.users.zowe}..ZOWERING) USAGE(PERSONAL) DEFAULT
   CHKCERT {zowe.setup.security.users.zowe}..ZOWECERT
*
* Option 2 - END .................................................. */
$$
//IFOPT2ED ENDIF
//*
//IFOPT3   IF (&OPTION EQ 3) THEN
//RUNOPT3  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//ACF2     DD DATA,DLM=$$,SYMBOLS=JCLONLY
ACF
//
* Option 3 - BEGINNING ............................................ */
* Import external certificate from data set ....................... */
   SET PROFILE(USER) DIV(CERTDATA)
   INSERT {zowe.setup.security.users.zowe}..ZOWECERT -
          DSNAME('{zowe.setup.certificate.keyring.import.dsName}.') -
          LABEL(&LABEL.) -
          PASSWORD('{zowe.setup.certificate.keyring.import.password}.') -
          TRUST
*
* Connect a Zowe's certificate with the keyring ................... */
   SET PROFILE(USER) DIVISION(CERTDATA)
   CONNECT CERTDATA({zowe.setup.security.users.zowe}..ZOWECERT) -
   KEYRING({zowe.setup.security.users.zowe}..ZOWERING) USAGE(PERSONAL) DEFAULT
   CHKCERT {zowe.setup.security.users.zowe}..ZOWECERT
*
* Option 3 - END .................................................. */
$$
//IFOPT3ED ENDIF
//*
//IFZWCA   IF (&IFZOWECA EQ 1) THEN
//RUNZWCA  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//ACF2     DD DATA,DLM=$$,SYMBOLS=JCLONLY
ACF
//
* Connect all CAs of the Zowe certificate's signing chain with the  */
* keyring ......................................................... */
   SET PROFILE(USER) DIVISION(CERTDATA)
   CONNECT CERTDATA(CERTAUTH.&ITRMZWCA.) RINGNAME({zowe.setup.certificate.keyring.name}.) -
   KEYRING({zowe.setup.security.users.zowe}..ZOWERING) USAGE(CERTAUTH)
*
   CONNECT CERTDATA(CERTAUTH.&ROOTZWCA.) RINGNAME({zowe.setup.certificate.keyring.name}.) -
   KEYRING({zowe.setup.security.users.zowe}..ZOWERING) USAGE(CERTAUTH)
$$
//IFZWCAED ENDIF
//*
//IFZFCA   IF (&IFROZFCA EQ 1) THEN
//RUNZFCA  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//ACF2     DD DATA,DLM=$$,SYMBOLS=JCLONLY
ACF
//
* Connect the z/OSMF root CA signed by a recognized certificate ... */
* authority (CA) with the keyring ................................. */
   SET PROFILE(USER) DIVISION(CERTDATA)
   CONNECT CERTDATA(CERTAUTH.&ROOTZFCA.) RINGNAME({zowe.setup.certificate.keyring.name}.) -
   KEYRING({zowe.setup.security.users.zowe}..ZOWERING) USAGE(CERTAUTH)
$$
//IFZFCAED ENDIF
//*
//COMACF2  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//ACF2     DD DATA,DLM=$$,SYMBOLS=JCLONLY
ACF
//
* A common part for all options - BEGINNING ....................... */
*
* Allow ZOWEUSER to access keyring ................................ */
  SET RESOURCE(FAC)
  RECKEY IRR ADD(DIGTCERT.LISTRING ROLE({zowe.setup.security.groups.stc}) -
  SERVICE(READ) ALLOW)
*
* Uncomment this command if SITE acid owns the Zowe certificate ... */
*  RECKEY IRR ADD(DIGTCERT.GENCERT ROLE({zowe.setup.security.groups.stc}) -
*  SERVICE(CONTROL) ALLOW)
*
  F ACF2,REBUILD(FAC)
*
* List the keyring ................................................ */
  SET PROFILE(USER) DIVISION(KEYRING)
  LIST {zowe.setup.security.users.zowe}..ZOWERING
* Common part - END ............................................... */
$$
//********************************************************************
//*
//* Top Secret ONLY, customize to meet your system requirements
//*
//********************************************************************
//RUNTSS   EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//*
//TSS      DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* Create the keyring .............................................. */
  TSS ADD({zowe.setup.security.users.zowe}.) KEYRING(ZOWERING) LABLRING({zowe.setup.certificate.keyring.name}.)
$$
//IFOPT1   IF (&OPTION EQ 1) THEN
//RUNOPT1  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//TSS      DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* Create Zowe's local CA authority ............................... */
  TSS GENCERT(CERTAUTH) +
        DIGICERT(ZOWECA) +
        SUBJECTN( +
          'CN="{zowe.setup.certificate.dname}. CA" +
          OU="{zowe.setup.certificate.dname.orgUnit}." +
          O="{zowe.setup.certificate.dname.org}." +
          L="{zowe.setup.certificate.dname.locality}." +
          SP="{zowe.setup.certificate.dname.state}." +
          C="{zowe.setup.certificate.dname.country}." ') +
        KEYSIZE(2048) +
        NADATE(05/01/30) +
        LABLCERT({zowe.setup.certificate.keyring.caLabel}) +
        KEYUSAGE('CERTSIGN')

/* Connect Zowe's local CA authority to the keyring ................ */
  TSS ADD({zowe.setup.security.users.zowe}.) KEYRING(ZOWERING) LABLRING({zowe.setup.certificate.keyring.name}.) +
      RINGDATA(CERTAUTH,ZOWECA)

/* Create a certificate signed by local zowe's CA .................. */
   TSS GENCERT({zowe.setup.security.users.zowe}.) +
       DIGICERT(ZOWECERT) +
       SUBJECTN( +
         'CN="{zowe.setup.certificate.dname}. certificate" +
         OU="{zowe.setup.certificate.dname.orgUnit}." +
         O="{zowe.setup.certificate.dname.org}." +
         L="{zowe.setup.certificate.dname.locality}." +
         SP="{zowe.setup.certificate.dname.state}." +
         C="{zowe.setup.certificate.dname.country}." ') +
       KEYSIZE(2048) +
       NADATE(05/01/30) +
       LABLCERT({zowe.setup.certificate.keyring.label}.) +
       KEYUSAGE('HANDSHAKE') +
       ALTNAME('DOMAIN={zowe.externalDomains[0]}') +
       SIGNWITH(CERTAUTH,ZOWECA)

/* Connect a Zowe's certificate with the keyring ................... */
   TSS ADD({zowe.setup.security.users.zowe}.) KEYRING(ZOWERING) +
       RINGDATA({zowe.setup.security.users.zowe}.,ZOWECERT) +
       USAGE(PERSONAL) DEFAULT

/* Option 1 - Default Option - END ................................. */
$$
//IFOPT1ED ENDIF
//*
//IFOPT2   IF (&OPTION EQ 2) THEN
//RUNOPT2  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//TSS      DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* Option 2 - BEGINNING ............................................ */
/* Connect a Zowe's certificate with the keyring ................... */
   TSS ADD({zowe.setup.security.users.zowe}.) KEYRING(ZOWERING) +
       RINGDATA(CERTSITE|userid,digicert) +
       USAGE(PERSONAL) DEFAULT

/* Option 2 - END .................................................. */
$$
//IFOPT2ED ENDIF
//*
//IFOPT3   IF (&OPTION EQ 3) THEN
//RUNOPT3  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//TSS      DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* Option 3 - BEGINNING ............................................ */
/* Import external certificate from data set ....................... */
   TSS ADD({zowe.setup.security.users.zowe}.) +
        DIGICERT(ZOWECERT) +
        DCDSN({zowe.setup.certificate.keyring.import.dsName}.) +
        LABLCERT({zowe.setup.certificate.keyring.label}.) +
        PKCSPASS('{zowe.setup.certificate.keyring.import.password}.') +
        TRUST

/* Connect a Zowe's certificate with the keyring ................... */
   TSS ADD({zowe.setup.security.users.zowe}.) KEYRING(ZOWERING) +
       RINGDATA({zowe.setup.security.users.zowe}.,ZOWECERT) +
       USAGE(PERSONAL) DEFAULT

/* Option 3 - END .................................................. */
$$
//IFOPT3ED ENDIF
//*
//IFZWCA   IF (&IFZOWECA EQ 1) THEN
//RUNZWCA  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//TSS      DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* Connect all CAs of the Zowe certificate's signing chain with the  */
/* keyring ......................................................... */
   TSS ADD({zowe.setup.security.users.zowe}.) KEYRING(ZOWERING) LABLRING({zowe.setup.certificate.keyring.name}.) +
       RINGDATA(CERTAUTH,&ITRMZWCA.) USAGE(CERTAUTH)

   TSS ADD({zowe.setup.security.users.zowe}.) KEYRING(ZOWERING) LABLRING({zowe.setup.certificate.keyring.name}.) +
       RINGDATA(CERTAUTH,&ROOTZWCA.) USAGE(CERTAUTH)
$$
//IFZWCAED ENDIF
//*
//IFZFCA   IF (&IFROZFCA EQ 1) THEN
//RUNZFCA  EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//TSS      DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* Connect the z/OSMF root CA signed by a recognized certificate ... */
/* authority (CA) with the keyring ................................. */
   TSS ADD({zowe.setup.security.users.zowe}.) KEYRING(ZOWERING) LABLRING({zowe.setup.certificate.keyring.name}.) +
       RINGDATA(CERTAUTH,&ROOTZFCA.) USAGE(CERTAUTH)
$$
//IFZFCAED ENDIF
//*
//COMTSS   EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME=&PRODUCT
//TSS      DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* A common part for all options starts here ....................... */

/* Allow ZOWEUSER to access keyring ................................ */
  TSS PERMIT({zowe.setup.security.users.zowe}.) IBMFAC(IRR.DIGTCERT.LISTRING) ACCESS(READ)

/* Uncomment this command if SITE acid owns the Zowe certificate ... */
/* TSS PERMIT({zowe.setup.security.users.zowe}.) IBMFAC(IRR.DIGTCERT.GENCERT) ACCESS(CONTROL)

/* List the keyring ................................................ */
  TSS LIST({zowe.setup.security.users.zowe}.) KEYRING(ZOWERING) LABLRING({zowe.setup.certificate.keyring.name}.)

/* Common part - END ............................................... */
/* only the last RC is returned, this command ensures it is a 0      */
PROFILE
$$
//*
