#if( $jobCard and $jobCard != "" and $jobCard != '#jobCard')
//ZWESECUR JOB ${acct},
// NOTIFY=&SYSUID,
#if( $sysaff and $sysaff != "" and $sysaff != '#sysaff')
// SYSAFF=${sysaff},
#end
#if( $user and $user != "" and $user != '#user')
// TIME=,USER=${user},
#end
// CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1)
#end
#if($ibmTemplate == 'YES')
//ZWESECUR JOB
#end
//*
//* This program and the accompanying materials are made available
//* under the terms of the Eclipse Public License v2.0 which
//* accompanies this distribution, and is available at
//* https://www.eclipse.org/legal/epl-v20.html
//*
//* SPDX-License-Identifier: EPL-2.0
//*
//* Copyright Contributors to the Zowe Project. 2018, 2020
//*
//*********************************************************************
//*
//* Zowe Open Source Project
//* This JCL can be used to define security permits for Zowe
//*
//*
//* CAUTION: This is neither a JCL procedure nor a complete job.
//* Before using this JCL, you will have to make the following
//* modifications:
//*
//* 1) Add job name and job parameters to the JOB statement, to
//*    meet your system requirements.
//*
//* 13) When not using AUTOUID and AUTOGID to assign z/OS UNIX UID
//*     and GID values, update the SET *ID= statements to match the
//*     desired UID and GID values.
//*
//* 14) When using Top Secret, update the Top Secret specific SET
//*     statements.
//*
//* 15) Customize the commands in the DD statement that matches your
//*     security product so that they meet your system requirements.
//*
//* Note(s):
//*
//* 1. THE USER ID THAT RUNS THIS JOB MUST HAVE SUFFICIENT AUTHORITY
//*    TO ALTER SECURITY DEFINITONS
//*
//* 2. The sample ACF2 commands create ROLEs that match the group
//*    names. Due to permits assigned to the &STCGRP ROLE, it is
//*    advised to ensure this ROLE has a unique identifier.
//*
//* 3. The Zowe started task user ID (variable ZOWEUSER) must be able
//*    to write persistent data in the zlux-app-server/deploy directory
//*    structure. This sample JCL makes the Zowe started task part of
//*    the Zowe administrator group (SET STCGRP=ADMINGRP. statement)
//*    to achieve this goal. Another solution, also below, which you can
//*    comment out, is giving the Zowe started task CONTROL access to
//*    the UNIXPRIV SUPERUSER.FILESYS profile.
//*
//* 4. This job WILL complete with return code 0.
//*    The results of each command must be verified after completion.
//*
//*********************************************************************
#if($ibmTemplate == 'YES')
//         EXPORT SYMLIST=*
//*
//*
//* The sample RACF and ACF2 commands assume AUTOUID and AUTOGID are
//* enabled. When this is not the case, or you are using Top Secret,
//* provide appropriate (numeric) values to these SET commands.
//         SET ADMINGID=             * Group ID for ZOWE administrators
//         SET   STCGID=&ADMINGID.   * Group ID for ZOWE started tasks
//         SET  ZOWEUID=             * UID for ZOWE started task User
//         SET   ZISUID=             * UID for ZIS started task User
//*
//* For RACF: If using AUTOUID and AUTOGID, the RACF database must be
//*           at AIM 2 or higher, and BPX.NEXT.USER must exist.
//* For ACF2: If using AUTOUID and AUTOGID, an AUTOIDOM GSO Record must
//*           exist.
//* For Top Secret: If a default UID and GID range is defined, you can
//*                 specify '?' in the SET *ID= statements to utilize
//*                 auto-assignment of UID and GID.
//*
//* Top Secret ONLY -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
//*                     12345678
//         SET ADMINDEP=             * department owning admin group
//         SET  STCGDEP=             * department owning STC group
//         SET  STCUDEP=             * department owning STC user IDs
//         SET  ZOWEDEP=             * department owning Zowe resources
//         SET  FACACID=             * ACID owning IBMFAC
//*                     12345678
#end
#if($ibmTemplate != 'YES')
//         EXPORT SYMLIST=*
//*
//*
//* The sample RACF and ACF2 commands assume AUTOUID and AUTOGID are
//* enabled. When this is not the case, or you are using Top Secret,
//* provide appropriate (numeric) values to these SET commands.
//         SET ADMINGID=${ADMINGID}  * Group ID for ZOWE administrators
//         SET   STCGID=${STCGID}    * Group ID for ZOWE started tasks
//         SET  ZOWEUID=${ZOWEUID}   * UID for ZOWE started task User
//         SET   ZISUID=${ZISUID}    * UID for ZIS started task User
//*
//* For RACF: If using AUTOUID and AUTOGID, the RACF database must be
//*           at AIM 2 or higher, and BPX.NEXT.USER must exist.
//* For ACF2: If using AUTOUID and AUTOGID, an AUTOIDOM GSO Record must
//*           exist.
//* For Top Secret: If a default UID and GID range is defined, you can
//*                 specify '?' in the SET *ID= statements to utilize
//*                 auto-assignment of UID and GID.
//*
//* Top Secret ONLY -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
//*                     12345678
//         SET ADMINDEP=${ADMINDEP}  * department owning admin group
//         SET  STCGDEP=${STCGDEP}   * department owning STC group
//         SET  STCUDEP=${STCUDEP}   * department owning STC user IDs
//         SET  ZOWEDEP=             * department owning Zowe resources
//         SET  FACACID=${FACACID}   * ACID owning IBMFAC
//*                     12345678
#end
//*
//* end Top Secret ONLY -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
//*
//*********************************************************************
//*
//* EXECUTE COMMANDS FOR SELECTED SECURITY PRODUCT
//*
//RUN      EXEC PGM=IKJEFT01,REGION=0M
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DDNAME={zowe.setup.security.product}
//*
//*********************************************************************
//*
//* RACF ONLY, customize to meet your system requirements
//*
//RACF     DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* ACTIVATE REQUIRED RACF SETTINGS AND CLASSES ..................... */

/* - Comment out the activation statements for the classes that are  */
/*   already active.                                                 */

/* display current settings                                          */
/*SETROPTS LIST                                                      */

/* activate FACILITY class for z/OS UNIX & Zowe ZIS profiles         */
  SETROPTS GENERIC(FACILITY)
  SETROPTS CLASSACT(FACILITY) RACLIST(FACILITY)

/** comment out to not use SUPERUSER.FILESYS, see JCL comments       */
/** activate UNIXPRIV class for z/OS UNIX profiles                   */
  SETROPTS GENERIC(UNIXPRIV)
  SETROPTS CLASSACT(UNIXPRIV) RACLIST(UNIXPRIV)

/* activate started task class                                       */
  SETROPTS GENERIC(STARTED)
  SETROPTS CLASSACT(STARTED) RACLIST(STARTED)

/* show results .................................................... */
  SETROPTS LIST

/* DEFINE ADMINISTRATORS ........................................... */

/* - The sample commands assume automatic generation of GID is       */
/*   enabled.                                                        */

/* group for administrators                                          */
/* replace AUTOGID with GID(&ADMINGID.) if AUTOGID not enabled       */
  LISTGRP  {zowe.setup.security.groups.admin}. OMVS
  ADDGROUP {zowe.setup.security.groups.admin}. OMVS(AUTOGID) -
   DATA('ZOWE ADMINISTRATORS')

/* uncomment to add existing user IDs to the &ADMINGRP group         */
/* CONNECT (userid,userid,...) GROUP({zowe.setup.security.groups.admin}.) AUTH(USE) */

/* DEFINE STARTED TASK ............................................. */

/* - Ensure that user IDs are protected with the NOPASSWORD keyword. */
/* - The sample commands assume automatic generation of UID and GID  */
/*   is enabled.                                                     */

/* comment out if STCGRP matches ADMINGRP (default), expect          */
/*   warning messages otherwise                                      */
/* group for started tasks                                           */
/* replace AUTOGID with GID(&STCGID.) if AUTOGID not enabled */
  LISTGRP  {zowe.setup.security.groups.stc}. OMVS
  ADDGROUP {zowe.setup.security.groups.stc}. OMVS(AUTOGID) -
   DATA('STARTED TASK GROUP WITH OMVS SEGMENT')

/* */

/* userid for ZOWE main server                                       */
/* replace AUTOUID with UID(&ZOWEUID.) if AUTOUID not enabled */
  LISTUSER {zowe.setup.security.users.zowe}. OMVS
  ADDUSER  {zowe.setup.security.users.zowe}. -
   NOPASSWORD -
   DFLTGRP({zowe.setup.security.groups.stc}.) -
   OMVS(HOME(/tmp) PROGRAM(/bin/sh) AUTOUID) -
   NAME('ZOWE SERVER') -
   DATA('ZOWE MAIN SERVER')

/* userid for ZIS cross memory server                                */
/* replace AUTOUID with UID(&ZISUID.) if AUTOUID not enabled */
  LISTUSER {zowe.setup.security.users.zis}. OMVS
  ADDUSER  {zowe.setup.security.users.zis}. -
   NOPASSWORD -
   DFLTGRP({zowe.setup.security.groups.stc}.) -
   OMVS(HOME(/tmp) PROGRAM(/bin/sh) AUTOUID) -
   NAME('ZOWE ZIS SERVER') -
   DATA('ZOWE ZIS CROSS MEMORY SERVER')

/* */

/* started task for ZOWE main server                                 */
  RLIST   STARTED {zowe.setup.security.stcs.zowe}..* ALL STDATA
  RDEFINE STARTED {zowe.setup.security.stcs.zowe}..* -
   STDATA(USER({zowe.setup.security.users.zowe}.) GROUP({zowe.setup.security.groups.stc}.) TRUSTED(NO)) -
   DATA('ZOWE MAIN SERVER')

/* started task for ZOWE Launcher in high availability               */
  RLIST   STARTED {zowe.setup.security.stcs.zowe}..* ALL STDATA
  RDEFINE STARTED {zowe.setup.security.stcs.zowe}..* -
   STDATA(USER({zowe.setup.security.users.zowe}.) GROUP({zowe.setup.security.groups.stc}.) TRUSTED(NO)) -
   DATA('ZOWE LAUNCHER SERVER')

/* started task for ZIS cross memory server                         */
  RLIST   STARTED {zowe.setup.security.stcs.zis}..* ALL STDATA
  RDEFINE STARTED {zowe.setup.security.stcs.zis}..* -
   STDATA(USER({zowe.setup.security.users.zis}.) GROUP({zowe.setup.security.groups.stc}.) TRUSTED(NO)) -
   DATA('ZOWE ZIS CROSS MEMORY SERVER')

/* started task for ZIS Auxiliary cross memory server                */
  RLIST   STARTED {zowe.setup.security.stcs.aux}..* ALL STDATA
  RDEFINE STARTED {zowe.setup.security.stcs.aux}..* -
   STDATA(USER({zowe.setup.security.users.zis}.) GROUP({zowe.setup.security.groups.stc}.) TRUSTED(NO)) -
   DATA('ZOWE ZIS AUX CROSS MEMORY SERVER')

  SETROPTS RACLIST(STARTED) REFRESH

/* show results .................................................... */
  LISTGRP  {zowe.setup.security.groups.stc}. OMVS
  LISTUSER {zowe.setup.security.users.zowe}. OMVS
  LISTUSER {zowe.setup.security.users.zis}. OMVS
  RLIST STARTED {zowe.setup.security.stcs.zowe}..* ALL STDATA
  RLIST STARTED {zowe.setup.security.stcs.zowe}..* ALL STDATA
  RLIST STARTED {zowe.setup.security.stcs.zis}..* ALL STDATA
  RLIST STARTED {zowe.setup.security.stcs.aux}..*  ALL STDATA

/* DEFINE ZIS SECURITY RESOURCES ................................... */

/* define ZIS security profile                                       */
  RLIST   FACILITY ZWES.IS ALL
  RDEFINE FACILITY ZWES.IS UACC(NONE)

/* DEFINE AUX SERVER PERMISIONS .................................... */

/* permit AUX STC to use ZIS cross memory server                     */
  PERMIT ZWES.IS CLASS(FACILITY) ACCESS(READ) ID({zowe.setup.security.users.zis}.)
  SETROPTS RACLIST(FACILITY) REFRESH

/* DEFINE ZOWE SERVER PERMISIONS ................................... */

/* permit Zowe main server to use ZIS cross memory server            */
  PERMIT ZWES.IS CLASS(FACILITY) ACCESS(READ) ID({zowe.setup.security.users.zowe}.)
  SETROPTS RACLIST(FACILITY) REFRESH

/* permit Zowe main server to create a user's security environment   */
/* ATTENTION: Defining the BPX.DAEMON or BPX.SERVER profile makes    */
/*            z/OS UNIX switch to z/OS UNIX level security. This is  */
/*            more secure, but it can impact operation of existing   */
/*            applications. Test this thoroughly before activating   */
/*            it on a production system.                             */
  RLIST   FACILITY BPX.DAEMON ALL
  RDEFINE FACILITY BPX.DAEMON UACC(NONE)
  PERMIT BPX.DAEMON CLASS(FACILITY) ACCESS(UPDATE) ID({zowe.setup.security.users.zowe}.)

  RLIST   FACILITY BPX.SERVER ALL
  RDEFINE FACILITY BPX.SERVER UACC(NONE)
  PERMIT BPX.SERVER CLASS(FACILITY) ACCESS(UPDATE) ID({zowe.setup.security.users.zowe}.)

/* permit Zowe main server to create a user's security environment   */
/* comment out the following 2 lines if the OMVSAPPL is not defined  */
/* in your environment                                               */
  PERMIT OMVSAPPL CLASS(APPL) ID({zowe.setup.security.users.zowe}.) ACCESS(READ)
  SETROPTS RACLIST(APPL) REFRESH

/* permit Zowe main server to set job name                           */
  RLIST   FACILITY BPX.JOBNAME ALL
  RDEFINE FACILITY BPX.JOBNAME UACC(NONE)
  PERMIT BPX.JOBNAME CLASS(FACILITY) ACCESS(READ) ID({zowe.setup.security.users.zowe}.)

  SETROPTS RACLIST(FACILITY) REFRESH

/* comment out to not use SUPERUSER.FILESYS, see JCL comments        */
/* permit Zowe main server to write persistent data                  */
  RLIST   UNIXPRIV SUPERUSER.FILESYS ALL
  RDEFINE UNIXPRIV SUPERUSER.FILESYS UACC(NONE)
  PERMIT SUPERUSER.FILESYS CLASS(UNIXPRIV) ACCESS(CONTROL) -
   ID({zowe.setup.security.users.zowe}.)

  SETROPTS RACLIST(UNIXPRIV) REFRESH

/* permit Zowe main server to use client certificate mapping service */
  RLIST   FACILITY IRR.RUSERMAP ALL
  RDEFINE FACILITY IRR.RUSERMAP UACC(NONE)
  PERMIT IRR.RUSERMAP CLASS(FACILITY) ACCESS(READ) ID({zowe.setup.security.users.zowe}.)

/* permit Zowe main server to use distributed identity mapping       */
/* service
  RLIST   FACILITY IRR.IDIDMAP.QUERY ALL
  RDEFINE FACILITY IRR.IDIDMAP.QUERY UACC(NONE)
  PERMIT IRR.IDIDMAP.QUERY CLASS(FACILITY) ACCESS(READ) -
   ID({zowe.setup.security.users.zowe}.)

/* permit Zowe main server to cut SMF records                        */
  RLIST   FACILITY IRR.RAUDITX ALL
  RDEFINE FACILITY IRR.RAUDITX UACC(NONE)
  PERMIT IRR.RAUDITX CLASS(FACILITY) ACCESS(READ) ID({zowe.setup.security.users.zowe}.)

  SETROPTS RACLIST(FACILITY) REFRESH
/* show results .................................................... */
  RLIST   FACILITY ZWES.IS           ALL
  RLIST   FACILITY BPX.DAEMON        ALL
  RLIST   FACILITY BPX.SERVER        ALL
  RLIST   FACILITY BPX.JOBNAME       ALL
  RLIST   UNIXPRIV SUPERUSER.FILESYS ALL
  RLIST   FACILITY IRR.RUSERMAP      ALL
  RLIST   FACILITY IRR.RAUDITX       ALL

/* DEFINE ZOWE DATA SET PROTECTION ................................. */

/* - HLQ..SZWEAUTH is an APF authorized data set. It is strongly     */
/*   advised to protect it against updates.                          */
/* - The sample commands assume that EGN (Enhanced Generic Naming)   */
/*   is active, which allows the usage of ** to represent any number */
/*   of qualifiers in the DATASET class. Substitute *.** with * if   */
/*   EGN is not active on your system.                               */

/* HLQ stub                                                          */
  LISTGRP  {zowe.setup.dataset.prefix}.
  ADDGROUP {zowe.setup.dataset.prefix}. DATA('Zowe - HLQ STUB')

/* general data set protection                                       */
  LISTDSD PREFIX({zowe.setup.dataset.prefix}.) ALL
  ADDSD  '{zowe.setup.dataset.prefix}..*.**' UACC(READ) DATA('Zowe')
  PERMIT '{zowe.setup.dataset.prefix}..*.**' CLASS(DATASET) ACCESS(ALTER) ID({zowe.setup.security.groups.sysProg}.)

  SETROPTS GENERIC(DATASET) REFRESH

/* show results .................................................... */
  LISTGRP {zowe.setup.dataset.prefix}.
  LISTDSD PREFIX({zowe.setup.dataset.prefix}.) ALL

/* DEFINE ZOWE RESOURCE PROTECTION ................................. */

/* - Defines new resource class for Zowe that protects access to     */
/*   sensitive Zowe resources.                                       */
/* - Defines resource APIML.SERVICES that controls access to         */
/*   detailed information about API services to Zowe users.          */

/* uncomment to activate CDT class to define ZOWE resource class     */
/* SETROPTS CLASSACT(CDT) RACLIST(CDT)                               */

/* define ZOWE resource class                                        */
/* skip this command if the ZOWE resource class already exists       */
/* use a unique value in POSIT                                       */
  RDEFINE CDT ZOWE -
    UACC(NONE) -
    CDTINFO(DEFAULTUACC(NONE) -
      FIRST(ALPHA) -
      OTHER(ALPHA,NATIONAL,NUMERIC,SPECIAL) -
      MAXLENGTH(246) -
      POSIT(607) -
      RACLIST(DISALLOWED))

  SETROPTS RACLIST(CDT) REFRESH
  SETROPTS CLASSACT(ZOWE)

/* define resource for information about API services                */
  RDEFINE ZOWE APIML.SERVICES UACC(NONE)

/* uncomment and replace "user" to permit Zowe users to access       */
/* the resource:                                                     */
/* PERMIT APIML.SERVICES CLASS(ZOWE) ID(user) ACCESS(READ)           */

/* show results                                                      */
  RLIST ZOWE *

/* ................................................................. */
/* only the last RC is returned, this command ensures it is a 0      */
PROFILE
$$
//*
//*********************************************************************
//*
//* ACF2 ONLY, customize to meet your system requirements
//*
//ACF2     DD DATA,DLM=$$,SYMBOLS=JCLONLY
ACF
*
* DEFINE ADMINISTRATORS ...........................................
*
* group for administrators
* replace AUTOGID with GID(&ADMINGID.) if AUTOGID is not enabled
*
SET PROFILE(GROUP) DIV(OMVS)
INSERT {zowe.setup.security.groups.admin}. AUTOGID
F ACF2,REBUILD(GRP),CLASS(P)
*
* uncomment and customize to add an existing userid as administrator
*
* SET X(ROL)
* INSERT {zowe.setup.security.groups.admin}. INCLUDE(userid) ROLE
* F ACF2,NEWXREF,TYPE(ROL)
*
* DEFINE STARTED TASK .............................................
*
* comment out if STCGRP matches ADMINGRP (default), expect
*   warning messages otherwise
* group for started tasks
* replace AUTOGID with GID(&STCGID.) if AUTOGID is not enabled
*
SET PROFILE(GROUP) DIV(OMVS)
INSERT {zowe.setup.security.groups.stc}. AUTOGID
F ACF2,REBUILD(GRP),CLASS(P)
*
*****
*
* userid for ZOWE main server
* replace AUTOUID with UID(&ZOWEUID.) if AUTOUID is not enabled
*
SET LID
INSERT {zowe.setup.security.users.zowe}. STC GROUP({zowe.setup.security.groups.stc}.)
SET PROFILE(USER) DIV(OMVS)
INSERT {zowe.setup.security.users.zowe}. AUTOUID HOME(/tmp) OMVSPGM(/bin/sh)
F ACF2,REBUILD(USR),CLASS(P),DIVISION(OMVS)
*
* userid for ZIS cross memory server
* replace AUTOUID with UID(&ZISUID.) if AUTOUID is not enabled
*
SET LID
INSERT {zowe.setup.security.users.zis}. STC GROUP({zowe.setup.security.groups.stc}.)
SET PROFILE(USER) DIV(OMVS)
INSERT {zowe.setup.security.users.zis}. AUTOUID HOME(/tmp) OMVSPGM(/bin/sh)
F ACF2,REBUILD(USR),CLASS(P),DIVISION(OMVS)
*
*****
*
* started task for ZOWE main server
*
SET CONTROL(GSO)
INSERT STC.{zowe.setup.security.stcs.zowe}. LOGONID({zowe.setup.security.users.zowe}.) +
GROUP({zowe.setup.security.groups.stc}.) +
STCID({zowe.setup.security.stcs.zowe}.)
F ACF2,REFRESH(STC)
*
* started task for ZOWE Launcher in high availability
*
SET CONTROL(GSO)
INSERT STC.{zowe.setup.security.stcs.zowe}. LOGONID({zowe.setup.security.users.zowe}.) +
GROUP({zowe.setup.security.groups.stc}.) +
STCID({zowe.setup.security.stcs.zowe}.)
F ACF2,REFRESH(STC)
*
* started task for ZIS cross memory server
*
SET CONTROL(GSO)
INSERT STC.{zowe.setup.security.stcs.zis}. LOGONID({zowe.setup.security.users.zis}.) +
GROUP({zowe.setup.security.groups.stc}.) +
STCID({zowe.setup.security.stcs.zis}.)
F ACF2,REFRESH(STC)
*
* started task for ZIS Auxiliary cross memory server
*
SET CONTROL(GSO)
INSERT STC.{zowe.setup.security.stcs.aux}. LOGONID({zowe.setup.security.users.zis}.) +
GROUP({zowe.setup.security.groups.stc}.) +
STCID({zowe.setup.security.stcs.aux}.)
F ACF2,REFRESH(STC)
*
* DEFINE ZIS SECURITY RESOURCES ..................................
*
* define a role holding the permissions, add {zowe.setup.security.users.zis} and
* {zowe.setup.security.users.zowe} to it
*
SET X(ROL)
INSERT {zowe.setup.security.groups.stc}. INCLUDE({zowe.setup.security.users.zowe}.) ROLE
F ACF2,NEWXREF,TYPE(ROL)
CHANGE {zowe.setup.security.groups.stc}. INCLUDE({zowe.setup.security.users.zis}.) ADD
F ACF2,NEWXREF,TYPE(ROL)
*
* DEFINE STC SERVER PERMISIONS ....................................
*
* permit AUX and Zowe main server to use ZIS cross memory server
*
SET RESOURCE(FAC)
RECKEY ZWES ADD(IS SERVICE(READ) ROLE({zowe.setup.security.groups.stc}.) ALLOW)
F ACF2,REBUILD(FAC)
*
* DEFINE ZOWE SERVER PERMISIONS ...................................
*
* permit Zowe main server to create a user's security environment
* ATTENTION: Defining the BPX.DAEMON or BPX.SERVER profile makes
*            z/OS UNIX switch to z/OS UNIX level security. This is
*            more secure, but it can impact operation of existing
*            applications. Test this thoroughly before activating
*            it on a production system.
*
SET RESOURCE(FAC)
RECKEY BPX ADD(DAEMON SERVICE(UPDATE) ROLE({zowe.setup.security.groups.stc}.) ALLOW)
RECKEY BPX ADD(SERVER SERVICE(UPDATE) ROLE({zowe.setup.security.groups.stc}.) ALLOW)
*
* permit Zowe main server to create a user's security environment
* comment out the following 3 lines if the OMVSAPPL is not defined
* in your environment
SET RESOURCE(APL)
RECKEY OMVSAPPL ADD(SERVICE(READ) ROLE({zowe.setup.security.groups.stc}.) ALLOW)
F ACF2,REBUILD(APL)
*
* Allow STCGRP role access to BPX.JOBNAME
RECKEY BPX ADD(JOBNAME SERVICE(READ) ROLE({zowe.setup.security.groups.stc}.) ALLOW)
F ACF2,REBUILD(FAC)
*
** comment out to not use SUPERUSER.FILESYS, see JCL comments
** permit Zowe main server to write persistent data
** if there is no rule, use set rule
SET RULE
COMPILE *
$KEY(SUPERUSER.FILESYS)
$TYPE(UNI)
$ROLESET
 ROLE({zowe.setup.security.groups.stc}.) ALLOW

STORE
* SET RESOURCE(UNI)
* RECKEY SUPERUSER.FILESYS ADD(SERVICE(READ) ROLE({zowe.setup.security.groups.stc}.) ALLOW)

  F ACF2,REBUILD(UNI)

* allow STCGRP role to use client certificate mapping service
SET RESOURCE(FAC)
RECKEY IRR ADD(RUSERMAP ROLE({zowe.setup.security.groups.stc}.) SERVICE(READ) ALLOW)
F ACF2,REBUILD(FAC)

* allow STCGRP role to use distributed identity mapping service
SET RESOURCE(FAC)
RECKEY IRR ADD(IDIDMAP.QUERY ROLE({zowe.setup.security.groups.stc}.) SERVICE(READ) ALLOW)
F ACF2,REBUILD(FAC)

* permit Zowe main server to cut SMF records
SET RESOURCE(FAC)
RECKEY IRR ADD(RAUDITX ROLE({zowe.setup.security.groups.stc}.) SERVICE(READ) ALLOW)
F ACF2,REBUILD(FAC)

*
* DEFINE ZOWE DATA SET PROTECTION .................................
*
* - HLQ..SZWEAUTH is an APF authorized data set. It is strongly
*   advised to protect it against updates.
*
*  HLQ stub
SET RULE
*  general data set protection
LIST {zowe.setup.dataset.prefix}.
RECKEY {zowe.setup.dataset.prefix}. ADD(- UID(-) READ(A) EXEC(P))
RECKEY {zowe.setup.dataset.prefix}. +
ADD(- UID({zowe.setup.security.groups.sysProg}.) READ(A) EXEC(A) ALLOC(A) WRITE(A))
*
*  show results
LIST {zowe.setup.dataset.prefix}.
*

*
* DEFINE ZOWE RESOURCE PROTECTION .................................
*
* - Defines new resource class for Zowe that protects access to
*   sensitive Zowe resources.
* - Defines resource APIML.SERVICES that controls access to
*   detailed information about API services to Zowe users.

* define ZOWE resource type and class mapping
* skip this section if the ZOWE resource class already exists
SET CONTROL(GSO)
INSERT CLASMAP.ZOWE RESOURCE(ZOWE) RSRCTYPE(ZWE)
F ACF2,REFRESH(CLASMAP),TYPE(GSO)
CHANGE INFODIR TYPES(R-RZWE)
F ACF2,REFRESH(INFODIR)
SET CONTROL(GSO)

* uncomment and replace "user" to permit Zowe users to access
* the resource:
* SET RESOURCE(ZWE)
* RECKEY APIML ADD(SERVICES -
* UID(user) SERVICE(READ) ALLOW)
* F ACF2,REBUILD(ZWE)

* show results
SET RESOURCE(ZWE)
LIST LIKE(-)
$$
//*
//*********************************************************************
//*
//* Top Secret ONLY, customize to meet your system requirements
//*
//TSS      DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* DEFINE ADMINISTRATORS ........................................... */

/* group for administrators                                          */
  TSS LIST({zowe.setup.security.groups.admin}.) SEGMENT(OMVS)
  TSS CREATE({zowe.setup.security.groups.admin}.) TYPE(GROUP) +
   NAME('ZOWE ADMINISTRATORS') +
   DEPT(&ADMINDEP.)
  TSS ADD({zowe.setup.security.groups.admin}.) GID(&ADMINGID.)

/* uncomment to add existing user IDs to the &ADMINGRP group         */
/* TSS ADD(userid) GROUP({zowe.setup.security.groups.admin}.) */

/* DEFINE STARTED TASK ............................................. */

/* comment out if STCGRP matches ADMINGRP (default), expect          */
/*   warning messages otherwise                                      */
/* group for started tasks                                           */
  TSS LIST({zowe.setup.security.groups.stc}.) SEGMENT(OMVS)
  TSS CREATE({zowe.setup.security.groups.stc}.) TYPE(GROUP) +
   NAME('STC GROUP WITH OMVS SEGMENT') +
   DEPT(&STCGDEP.)
  TSS ADD({zowe.setup.security.groups.stc}.) GID(&STCGID.)

/* */

/* userid for ZOWE main server                                       */
  TSS LIST({zowe.setup.security.users.zowe}.) SEGMENT(OMVS)
  TSS CREATE({zowe.setup.security.users.zowe}.) TYPE(USER) PASS(NOPW,0) +
   NAME('ZOWE MAIN SERVER') +
   DEPT(&STCUDEP.)
   TSS ADD({zowe.setup.security.users.zowe}.) GROUP({zowe.setup.security.groups.stc}.) +
   DFLTGRP({zowe.setup.security.groups.stc}.) +
   HOME(/tmp) OMVSPGM(/bin/sh) UID(&ZOWEUID.)

/* userid for ZIS cross memory server                                */
  TSS LIST({zowe.setup.security.users.zis}.) SEGMENT(OMVS)
  TSS CREATE({zowe.setup.security.users.zis}.) TYPE(USER) PASS(NOPW,0) +
   NAME('ZOWE ZIS CROSS MEMORY SERVER') +
   DEPT(&STCUDEP.)
  TSS ADD({zowe.setup.security.users.zis}.) GROUP({zowe.setup.security.groups.stc}.) +
   DFLTGRP({zowe.setup.security.groups.stc}.) +
   HOME(/tmp) OMVSPGM(/bin/sh) UID(&ZISUID.)

/* */

/* started task for ZOWE main server                                 */
  TSS LIST(STC) PROCNAME({zowe.setup.security.stcs.zowe}.) PREFIX
  TSS ADD(STC) PROCNAME({zowe.setup.security.stcs.zowe}.) ACID({zowe.setup.security.users.zowe}.)
  TSS ADD({zowe.setup.security.users.zowe}.) FAC(STC)

/* started task for ZOWE Launcher in high availability               */
  TSS LIST(STC) PROCNAME({zowe.setup.security.stcs.zowe}.) PREFIX
  TSS ADD(STC) PROCNAME({zowe.setup.security.stcs.zowe}.) ACID({zowe.setup.security.users.zowe}.)
  TSS ADD({zowe.setup.security.users.zowe}.) FAC(STC)

/* started task for ZIS cross memory server                          */
  TSS LIST(STC) PROCNAME({zowe.setup.security.stcs.zis}.) PREFIX
  TSS ADD(STC) PROCNAME({zowe.setup.security.stcs.zis}.) ACID({zowe.setup.security.users.zis}.)
  TSS ADD({zowe.setup.security.users.zis}.) FAC(STC)

/* started task for ZIS Auxiliary cross memory server                */
  TSS LIST(STC) PROCNAME({zowe.setup.security.stcs.aux}.) PREFIX
  TSS ADD(STC) PROCNAME({zowe.setup.security.stcs.aux}.) ACID({zowe.setup.security.users.zis}.)
  TSS ADD({zowe.setup.security.users.zis}.) FAC(STC)

/* DEFINE ZIS SECURITY RESOURCES ................................... */

/* define ZIS security profile                                       */
  TSS ADD(&FACACID.) IBMFAC(ZWES.IS)

/* DEFINE AUX SERVER PERMISIONS .................................... */

/* permit AUX STC to use ZIS cross memory server                     */
  TSS WHOHAS IBMFAC(ZWES.IS)
  TSS PERMIT({zowe.setup.security.users.zis}.) IBMFAC(ZWES.IS) ACCESS(READ)

#if($ibmTemplate != 'YES')
/* The ZOWESTC started task is a multi-user address space therefore  */
/* a TSS FACILITY needs to be defined and assigned to the started    */
/* task. The all acids signing on to the started task will need to   */
/* be authorized to the FACILITY.                                    */
/*                                                                   */
/* The following steps have to performed manually. See more details  */
/* in the 'Configuring the z/OS system for Zowe' section,            */
/* https://docs.zowe.org/stable/user-guide/configure-zos-system.html */
/*                                                                   */
/* Create FACILITY example:                                          */
/* In the TSSPARMS add the following lines to create                 */
/* the new FACILITY.                                                 */
/*                                                                   */
/* FACILITY(USER11=NAME=ZOWE)                                        */
/* FACILITY(ZOWE=MODE=FAIL)                                          */
/* FACILITY(ZOWE=RES)                                                */
/*                                                                   */
/* To assign the FACILITY to the started task issue the following    */
/* command:                                                          */
/*                                                                   */
/* TSS ADD(started_task_acid) MASTFAC(ZOWE)                          */
/*                                                                   */
/* To authorize a user to signon to the FACILITY, issues the         */
/* following command.                                                */
/*                                                                   */
/* TSS ADD(user_acid) FAC(ZOWE)                                      */
#end
/* DEFINE ZOWE SERVER PERMISIONS ................................... */

/* permit Zowe main server to use ZIS cross memory server            */
  TSS WHOHAS IBMFAC(ZWES.IS)
  TSS PERMIT({zowe.setup.security.users.zowe}.) IBMFAC(ZWES.IS) ACCESS(READ)

/* permit Zowe main server to create a user's security environment   */
/* ATTENTION: Defining the BPX.DAEMON or BPX.SERVER profile makes    */
/*            z/OS UNIX switch to z/OS UNIX level security. This is  */
/*            more secure, but it can impact operation of existing   */
/*            applications. Test this thoroughly before activating   */
/*            it on a production system.                             */
  TSS ADD(&FACACID.) IBMFAC(BPX.)
  TSS WHOHAS IBMFAC(BPX.DAEMON)
  TSS PER({zowe.setup.security.users.zowe}.) IBMFAC(BPX.DAEMON) ACCESS(UPDATE)
  TSS WHOHAS IBMFAC(BPX.SERVER)
  TSS PER({zowe.setup.security.users.zowe}.) IBMFAC(BPX.SERVER) ACCESS(UPDATE)

/* permit Zowe main server to create a user's security environment   */
/* comment out the following line if the OMVSAPPL is not defined     */
/* in your environment                                               */
TSS PERMIT({zowe.setup.security.users.zowe}.) APPL(OMVSAPPL)

/* Allow ZOWEUSER access to BPX.JOBNAME                              */
  TSS WHOHAS IBMFAC(BPX.JOBNAME)
  TSS PER({zowe.setup.security.users.zowe}.) IBMFAC(BPX.JOBNAME) ACCESS(READ)

/* comment out to not use SUPERUSER.FILESYS, see JCL comments        */
/* permit Zowe main server to write persistent data                  */
  TSS ADD(&FACACID.) UNIXPRIV(SUPERUSE)
  TSS WHOHAS UNIXPRIV(SUPERUSER.FILESYS)
  TSS PER({zowe.setup.security.users.zowe}.) UNIXPRIV(SUPERUSER.FILESYS) ACCESS(CONTROL)

/* permit Zowe main server to use client certificate mapping service */
  TSS WHOHAS IBMFAC(IRR.RUSERMAP)
  TSS PER({zowe.setup.security.users.zowe}.) IBMFAC(IRR.RUSERMAP) ACCESS(READ)

/* permit Zowe main server to use distributed identity mapping       */
/* service
  TSS WHOHAS IBMFAC(IRR.IDIDMAP.QUERY)
  TSS PER({zowe.setup.security.users.zowe}.) IBMFAC(IRR.IDIDMAP.QUERY) ACCESS(READ)

/* permit Zowe main server to cut SMF records                        */
  TSS WHOHAS IBMFAC(IRR.RAUDITX)
  TSS PER({zowe.setup.security.users.zowe}.) IBMFAC(IRR.RAUDITX) ACCESS(READ)

/* DEFINE ZOWE DATA SET PROTECTION ................................. */

/* - HLQ..SZWEAUTH is an APF authorized data set. It is strongly     */
/*   advised to protect it against updates.                          */

/* HLQ stub                                                          */
  TSS ADD(&ADMINDEP.) DATASET({zowe.setup.dataset.prefix}..)

/* general data set protection                                       */
  TSS WHOHAS DATASET({zowe.setup.dataset.prefix}.)
  TSS PER(ALL) DATASET({zowe.setup.dataset.prefix}..) ACCESS(READ)
  TSS PER({zowe.setup.security.groups.sysProg})  DATASET({zowe.setup.dataset.prefix}..) ACCESS(ALL)

/* show results                                                      */
  TSS WHOHAS DATASET({zowe.setup.dataset.prefix}.)

/* DEFINE ZOWE RESOURCE PROTECTION ................................. */

/* - Defines new resource class for Zowe that protects access to     */
/*   sensitive Zowe resources.                                       */
/* - Defines resource APIML.SERVICES that controls access to         */
/*   detailed information about API services to Zowe users.          */

/* define ZOWE resource class                                        */
/* skip this command if the ZOWE resource class already exists       */
  TSS ADDTO(RDT) RESCLASS(ZOWE) MAXLEN(246) +
    ACLST(NONE,READ,UPDATE,CONTROL) DEFACC(NONE)

/* define resource for information about API services                */
  TSS ADDTO(&ZOWEDEP.) ZOWE(APIML.)

/* uncomment and replace "user" to permit Zowe users to access       */
/* the resource:                                                     */
/* TSS PERMIT(user) ZOWE(APIML.SERVICES) ACCESS(READ)                */

/* show results                                                      */
   TSS LIST(RDT) RESCLASS(ZOWE)

/* If any of these started tasks are multiusers address spaces       */
/* a TSS FACILITY needs to be defined and assigned to the started    */
/* and should not be using the STC FACILITY . The all acids signing  */
/* on to the started tasks will need to be authorized to the         */
/* FACILITY.                                                         */
/*                                                                   */
/* Create FACILITY example:                                          */
/* In the TSSPARMS add the following lines to create                 */
/* the new FACILITY.                                                 */
/*                                                                   */
/* FACILITY(USER11=NAME=ZOWE)                                        */
/* FACILITY(ZOWE=MODE=FAIL)                                          */
/* FACILITY(ZOWE=RES)                                                */
/*                                                                   */
/* To assign the FACILITY to the started task issue the following    */
/* command:                                                          */
/*                                                                   */
/* TSS ADD(started_task_acid) MASTFAC(ZOWE)                          */
/*                                                                   */
/* To authorize a user to signon to the FACILITY, issues the         */
/* following command.                                                */
/*                                                                   */
/* TSS ADD(user_acid) FAC(ZOWE)                                      */

/* ................................................................. */
/* only the last RC is returned, this command ensures it is a 0      */
PROFILE
$$
//*
